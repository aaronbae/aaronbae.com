{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { UPDATE_POST, RECEIVE_POSTS, ADD_NEW_POST, ADD_NEW_PARAGRAPH, REMOVE_PARAGRAPH, CHANGE_EDIT_MODE } from './BlogActions'; // The initial application state\n\nexport let initialState = {\n  posts: {},\n  current_page: 1,\n  total_pages: 1,\n  edit_mode: false\n}; // Takes care of changing the application state\n\nfunction BlogReducer(state = initialState, action) {\n  var new_posts = _objectSpread({}, state.posts);\n\n  switch (action.type) {\n    case CHANGE_EDIT_MODE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        edit_mode: action.edit_mode\n      });\n\n    case REMOVE_PARAGRAPH:\n      new_posts[action.post_id].content.splice(action.paragraph_index, 1);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: new_posts\n      });\n\n    case ADD_NEW_PARAGRAPH:\n      new_posts[action.post_id].content.splice(parseInt(action.paragraph_index) + 1, 0, action.initial_content);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: new_posts\n      });\n\n    case ADD_NEW_POST:\n      new_posts[action.new_post._id] = action.new_post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: new_posts\n      });\n\n    case UPDATE_POST:\n      new_posts[action.new_post._id] = action.new_post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: new_posts\n      });\n\n    case RECEIVE_POSTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        posts: action.posts,\n        current_page: action.current_page,\n        total_pages: action.total_pages\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default BlogReducer;","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/src/redux/BlogReducer.js"],"names":["UPDATE_POST","RECEIVE_POSTS","ADD_NEW_POST","ADD_NEW_PARAGRAPH","REMOVE_PARAGRAPH","CHANGE_EDIT_MODE","initialState","posts","current_page","total_pages","edit_mode","BlogReducer","state","action","new_posts","type","post_id","content","splice","paragraph_index","parseInt","initial_content","new_post","_id"],"mappings":";;;;;;AAAA,SACEA,WADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,iBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,eAPP,C,CASA;;AACA,OAAO,IAAIC,YAAY,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,YAAY,EAAE,CAFU;AAGxBC,EAAAA,WAAW,EAAE,CAHW;AAIxBC,EAAAA,SAAS,EAAE;AAJa,CAAnB,C,CAOP;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAGN,YAA7B,EAA2CO,MAA3C,EAAmD;AACjD,MAAIC,SAAS,qBAAOF,KAAK,CAACL,KAAb,CAAb;;AACA,UAAQM,MAAM,CAACE,IAAf;AACE,SAAKV,gBAAL;AACE,6CAAYO,KAAZ;AAAmBF,QAAAA,SAAS,EAAEG,MAAM,CAACH;AAArC;;AACF,SAAKN,gBAAL;AACEU,MAAAA,SAAS,CAACD,MAAM,CAACG,OAAR,CAAT,CAA0BC,OAA1B,CAAkCC,MAAlC,CAAyCL,MAAM,CAACM,eAAhD,EAAiE,CAAjE;AACA,6CAAYP,KAAZ;AAAmBL,QAAAA,KAAK,EAAEO;AAA1B;;AACF,SAAKX,iBAAL;AACEW,MAAAA,SAAS,CAACD,MAAM,CAACG,OAAR,CAAT,CAA0BC,OAA1B,CAAkCC,MAAlC,CAAyCE,QAAQ,CAACP,MAAM,CAACM,eAAR,CAAR,GAAmC,CAA5E,EAA+E,CAA/E,EAAkFN,MAAM,CAACQ,eAAzF;AACA,6CAAYT,KAAZ;AAAmBL,QAAAA,KAAK,EAAEO;AAA1B;;AACF,SAAKZ,YAAL;AACEY,MAAAA,SAAS,CAACD,MAAM,CAACS,QAAP,CAAgBC,GAAjB,CAAT,GAAiCV,MAAM,CAACS,QAAxC;AACA,6CAAYV,KAAZ;AAAmBL,QAAAA,KAAK,EAAEO;AAA1B;;AACF,SAAKd,WAAL;AACEc,MAAAA,SAAS,CAACD,MAAM,CAACS,QAAP,CAAgBC,GAAjB,CAAT,GAAiCV,MAAM,CAACS,QAAxC;AACA,6CAAYV,KAAZ;AAAmBL,QAAAA,KAAK,EAAEO;AAA1B;;AACF,SAAKb,aAAL;AACE,6CAAYW,KAAZ;AACEL,QAAAA,KAAK,EAAEM,MAAM,CAACN,KADhB;AAEEC,QAAAA,YAAY,EAAEK,MAAM,CAACL,YAFvB;AAGEC,QAAAA,WAAW,EAAEI,MAAM,CAACJ;AAHtB;;AAKF;AACE,aAAOG,KAAP;AAtBJ;AAwBD;;AAED,eAAeD,WAAf","sourcesContent":["import {\r\n  UPDATE_POST,\r\n  RECEIVE_POSTS,\r\n  ADD_NEW_POST,\r\n  ADD_NEW_PARAGRAPH,\r\n  REMOVE_PARAGRAPH,\r\n  CHANGE_EDIT_MODE,\r\n} from './BlogActions'\r\n\r\n// The initial application state\r\nexport let initialState = {\r\n  posts: {},\r\n  current_page: 1,\r\n  total_pages: 1,\r\n  edit_mode: false\r\n}\r\n\r\n// Takes care of changing the application state\r\nfunction BlogReducer(state = initialState, action) {\r\n  var new_posts = {...state.posts}\r\n  switch (action.type) {\r\n    case CHANGE_EDIT_MODE:\r\n      return { ...state, edit_mode: action.edit_mode }\r\n    case REMOVE_PARAGRAPH:\r\n      new_posts[action.post_id].content.splice(action.paragraph_index, 1)\r\n      return { ...state, posts: new_posts }\r\n    case ADD_NEW_PARAGRAPH:\r\n      new_posts[action.post_id].content.splice(parseInt(action.paragraph_index) + 1, 0, action.initial_content)\r\n      return { ...state, posts: new_posts }\r\n    case ADD_NEW_POST:\r\n      new_posts[action.new_post._id] = action.new_post\r\n      return { ...state, posts: new_posts }\r\n    case UPDATE_POST:\r\n      new_posts[action.new_post._id] = action.new_post\r\n      return { ...state, posts: new_posts}\r\n    case RECEIVE_POSTS:\r\n      return { ...state, \r\n        posts: action.posts, \r\n        current_page: action.current_page, \r\n        total_pages: action.total_pages \r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default BlogReducer"]},"metadata":{},"sourceType":"module"}