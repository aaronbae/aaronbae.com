{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport { useSelector } from 'react-redux';\nimport PostInformation from '../../components/Blog/PostInformation';\nimport PostControls from '../../components/Blog/PostControls';\nimport PostContent from '../../components/Blog/PostContent';\nimport PostEditControls from '../../components/Blog/PostEditControls';\nimport { url_to_post_id, summarize_content, post_to_url, find_image_from_post } from '../../library/format';\nimport '../../styles/Blog/id.css';\n\nfunction PostViewer({\n  post_id\n}) {\n  const post = useSelector(store => store.BlogReducer.posts[post_id]);\n  const edit_mode = useSelector(store => store.BlogReducer.edit_mode);\n  const description = summarize_content(post.content);\n  const url = process.env.NEXT_PUBLIC_URL + post_to_url(post);\n  const img = find_image_from_post(post);\n  return __jsx(\"div\", {\n    className: \"post-id\"\n  }, __jsx(Head, null, __jsx(\"title\", null, post.title), __jsx(\"meta\", {\n    key: \"title\",\n    name: \"title\",\n    content: post.title\n  }), __jsx(\"meta\", {\n    key: \"description\",\n    name: \"description\",\n    content: description\n  }), __jsx(\"meta\", {\n    key: \"og:url\",\n    property: \"og:url\",\n    content: url\n  }), __jsx(\"meta\", {\n    key: \"og:type\",\n    property: \"og:type\",\n    content: \"article\"\n  }), __jsx(\"meta\", {\n    key: \"og:title\",\n    property: \"og:title\",\n    content: post.title\n  }), __jsx(\"meta\", {\n    key: \"og:description\",\n    property: \"og:description\",\n    content: description\n  }), img !== \"\" && __jsx(\"meta\", {\n    key: \"og:image\",\n    property: \"og:image\",\n    content: img\n  })), post && __jsx(\"div\", {\n    className: \"card-wrapper\"\n  }, __jsx(PostInformation, {\n    post_id: post._id\n  }), __jsx(PostControls, {\n    post_id: post._id\n  }), __jsx(PostContent, {\n    post_id: post._id\n  }), edit_mode && __jsx(PostEditControls, {\n    post_id: post._id\n  })));\n}\n\nexport async function getServerSideProps(context) {\n  const raw = await fetch(process.env.NEXT_PUBLIC_POST_URL + url_to_post_id(context.query.id));\n  const res = await raw.json();\n  const post = res.posts[0];\n  return {\n    props: {\n      post_id: post._id,\n      initialReduxState: {\n        BlogReducer: {\n          posts: {\n            [post._id]: post\n          }\n        }\n      }\n    }\n  };\n}\nexport default PostViewer;","map":null,"metadata":{},"sourceType":"module"}