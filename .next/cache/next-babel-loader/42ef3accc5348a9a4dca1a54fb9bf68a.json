{"ast":null,"code":"export function create_img_element(url) {\n  url = url.replace(/https:\\/\\/aaronbaebucket.s3.([^/]+)\\//gi, \"https://aaronbae.com/api/files/\");\n  return `<img src='${url}' class='aws-image' alt='Loaded from AWS'>`;\n}\nexport function format_post_content(post) {\n  if (post.content === \"<br>\" || post.content === \"\") {\n    return \"<div></div>\";\n  }\n\n  return post.content;\n}\nexport function raw_tags_to_array(raw_tags_input) {\n  const punctuation = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\n  return raw_tags_input.split(\",\").map(s => s.trim().replace(punctuation, ''));\n}\nexport function posts_to_array(posts) {\n  const sorted_array = Object.values(posts).sort(function (a, b) {\n    if (a.createtime >= b.createtime) {\n      return -1;\n    }\n\n    return 1;\n  });\n  return sorted_array;\n}\nexport function page_to_skip(page, total_pages) {\n  return 5 * (Math.min(total_pages, Math.max(1, page)) - 1);\n}\nexport function pagination_array(current_page, total_pages) {\n  const start = Math.max(1, Math.min(current_page - 2, total_pages - 4));\n  return [...Array(5).keys()].map(x => x + start);\n}\nexport function query_param_string_to_objects(query_string) {\n  let result = {};\n\n  for (const p of query_string.toLowerCase().replace(\"?\", \"\").split(\"&\")) {\n    let p_split = p.toString().split(\"=\");\n    result[p_split[0]] = p_split[1];\n  }\n\n  return result;\n}\nexport function post_to_url(post) {\n  let modified_title = post.title.replace(/[^A-Za-z0-9\\s]/g, \"\").toLowerCase();\n  modified_title = modified_title.split(\" \").join(\"-\");\n  return `/blog/${modified_title}-${post._id}`;\n}\nexport function url_to_post_id(url) {\n  let splitted = url.split(\"-\");\n  return splitted[splitted.length - 1];\n}\nexport function format_date(date_string) {\n  var given_date = new Date(date_string);\n  var corrected_d = new Date(given_date.getTime() - new Date().getTimezoneOffset() * 60000);\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var days = [\"Monday\", \"Tueday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  var result = days[corrected_d.getDay()] + \", \" + month[corrected_d.getMonth()] + \" \" + corrected_d.getDate() + \", \" + corrected_d.getFullYear();\n  return result;\n}\nexport function summarize_content(content) {\n  return content.replace(/<div>|<\\/div>|<br>|<img\\s+.*>/gi, \" \").substring(0, 200) + \"...\";\n}\nexport function find_image_from_post(post) {\n  let img = \"\";\n  something = /https\\:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/;\n  const shit = post.content.match(/<img\\s.*alt=\"Loaded from AWS\">/gi);\n\n  if (shit) {\n    console.log(shit);\n    console.log(shit[0].match(/https.*.(png|jpg|jpeg)/gi)[0]);\n    return shit[0].match(/https.*.(png|jpg|jpeg)/i)[0];\n  }\n\n  return img;\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/src/library/format.js"],"names":["create_img_element","url","replace","format_post_content","post","content","raw_tags_to_array","raw_tags_input","punctuation","split","map","s","trim","posts_to_array","posts","sorted_array","Object","values","sort","a","b","createtime","page_to_skip","page","total_pages","Math","min","max","pagination_array","current_page","start","Array","keys","x","query_param_string_to_objects","query_string","result","p","toLowerCase","p_split","toString","post_to_url","modified_title","title","join","_id","url_to_post_id","splitted","length","format_date","date_string","given_date","Date","corrected_d","getTime","getTimezoneOffset","month","days","getDay","getMonth","getDate","getFullYear","summarize_content","substring","find_image_from_post","img","something","shit","match","console","log"],"mappings":"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","sourcesContent":["export function create_img_element(url) {\r\n  url = url.replace(/https:\\/\\/aaronbaebucket.s3.([^/]+)\\//gi, \"https://aaronbae.com/api/files/\")\r\n  return `<img src='${url}' class='aws-image' alt='Loaded from AWS'>`\r\n}\r\nexport function format_post_content(post) {\r\n  if(post.content === \"<br>\" || post.content===\"\"){\r\n    return \"<div></div>\"\r\n  }\r\n  return post.content\r\n}\r\nexport function raw_tags_to_array(raw_tags_input) {\r\n  const punctuation = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g\r\n  return raw_tags_input.split(\",\").map(s => s.trim().replace(punctuation, ''))\r\n}\r\nexport function posts_to_array(posts) {\r\n  const sorted_array = Object.values(posts).sort(function(a,b) {\r\n    if(a.createtime >= b.createtime){\r\n      return -1\r\n    }\r\n    return 1\r\n  })\r\n  return sorted_array\r\n}\r\n\r\nexport function page_to_skip(page, total_pages) {\r\n  return 5 * (Math.min(total_pages, Math.max(1, page)) - 1)\r\n}\r\nexport function pagination_array(current_page, total_pages) {\r\n  const start = Math.max(1, Math.min(current_page - 2, total_pages-4))\r\n  return [...Array(5).keys()].map(x => x+start)\r\n}\r\n\r\n\r\nexport function query_param_string_to_objects(query_string){\r\n  let result = {}\r\n  for(const p of  query_string.toLowerCase().replace(\"?\", \"\").split(\"&\")){\r\n    let p_split = p.toString().split(\"=\")\r\n    result[p_split[0]] = p_split[1]\r\n  }\r\n  return result\r\n}\r\n\r\nexport function post_to_url(post) {\r\n  let modified_title = post.title.replace(/[^A-Za-z0-9\\s]/g,\"\").toLowerCase()\r\n  modified_title = modified_title.split(\" \").join(\"-\")\r\n  return `/blog/${modified_title}-${post._id}`\r\n}\r\nexport function url_to_post_id(url) {\r\n  let splitted = url.split(\"-\");\r\n  return splitted[splitted.length - 1]\r\n}\r\n\r\nexport function format_date(date_string) {\r\n  var given_date = new Date(date_string)\r\n  var corrected_d = new Date(given_date.getTime() - new Date().getTimezoneOffset() * 60000)\r\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n  var days = [\"Monday\", \"Tueday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n  var result = days[corrected_d.getDay()] + \", \" + month[corrected_d.getMonth()] + \" \" + corrected_d.getDate() + \", \" + corrected_d.getFullYear()\r\n  return result\r\n}\r\n\r\nexport function summarize_content(content) {\r\n  return content.replace(/<div>|<\\/div>|<br>|<img\\s+.*>/gi, \" \").substring(0, 200) + \"...\"\r\n}\r\n\r\nexport function find_image_from_post(post){\r\n  let img = \"\"\r\n  something = /https\\:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/\r\n  const shit = post.content.match(/<img\\s.*alt=\"Loaded from AWS\">/gi)\r\n  if(shit){\r\n    console.log(shit)\r\n    console.log(shit[0].match(/https.*.(png|jpg|jpeg)/gi)[0])\r\n    return shit[0].match(/https.*.(png|jpg|jpeg)/i)[0]\r\n  }\r\n  return img\r\n}\r\n"]},"metadata":{},"sourceType":"module"}