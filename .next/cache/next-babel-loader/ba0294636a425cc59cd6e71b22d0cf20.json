{"ast":null,"code":"export var RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport var UPDATE_POST = \"UPDATE_POST\";\nexport var ADD_NEW_POST = \"ADD_NEW_POST\";\nexport var ADD_NEW_PARAGRAPH = \"ADD_NEW_PARAGRAPH\";\nexport var REMOVE_PARAGRAPH = \"REMOVE_PARAGRAPH\";\nexport var CHANGE_EDIT_MODE = \"CHANGE_EDIT_MODE\"; // TERMINALS\n\nexport function change_edit_mode(boolean_value) {\n  return {\n    type: CHANGE_EDIT_MODE,\n    edit_mode: boolean_value\n  };\n}\nexport function add_new_post(new_post) {\n  return {\n    type: ADD_NEW_POST,\n    new_post: new_post\n  };\n}\nexport function update_title(new_post, title) {\n  new_post.title = title;\n  return {\n    type: UPDATE_POST,\n    new_post: new_post\n  };\n}\nexport function update_tags(new_post, tags) {\n  new_post.tags = tags;\n  return {\n    type: UPDATE_POST,\n    new_post: new_post\n  };\n}\nexport function update_public(new_post, public_boolean) {\n  new_post[\"public\"] = public_boolean;\n  return {\n    type: UPDATE_POST,\n    new_post: new_post\n  };\n}\nexport function update_content(new_post, content) {\n  new_post.content = content;\n  return {\n    type: UPDATE_POST,\n    new_post: new_post\n  };\n}\n\nfunction receive_posts(res) {\n  // TEMPORARY\n  if (!res.hasOwnProperty('posts')) {\n    res = {\n      posts: res,\n      current_page: 1,\n      total_pages: 1\n    };\n  }\n\n  var posts = {};\n\n  for (var index in res.posts) {\n    var p = res.posts[index];\n    posts[p._id] = p;\n  }\n\n  return {\n    type: RECEIVE_POSTS,\n    posts: posts,\n    current_page: res.current_page,\n    total_pages: res.total_pages,\n    receivedAt: Date.now()\n  };\n} // FETCHERS\n\n\nexport function fetch_public_posts() {\n  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (dispatch) {\n    var url = process.env.NEXT_PUBLIC_POST_URL + \"public\";\n\n    if (skip > 0) {\n      url += \"?skip=\" + skip.toString();\n    }\n\n    fetch(url).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      dispatch(receive_posts(res));\n    });\n  };\n}\nexport function fetch_posts() {\n  var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function (dispatch) {\n    var url = process.env.NEXT_PUBLIC_POST_URL;\n\n    if (skip > 0) {\n      url = url.slice(0, -1) + \"?skip=\" + skip.toString();\n    }\n\n    fetch(url).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      return dispatch(receive_posts(res));\n    });\n  };\n}\nexport function fetch_post_by_id(post_id) {\n  return function (dispatch) {\n    fetch(process.env.NEXT_PUBLIC_POST_URL + post_id).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      return dispatch(receive_posts(res));\n    });\n  };\n}\nexport function create_new_post() {\n  return function (dispatch) {\n    var url = process.env.NEXT_PUBLIC_POST_URL + \"add/\";\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({})\n    }).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      dispatch(add_new_post(res.post));\n      dispatch(change_edit_mode(true));\n    });\n  };\n}\nexport function save_local_changes(post) {\n  var url = process.env.NEXT_PUBLIC_POST_URL + \"update/\" + post._id.toString();\n\n  return function (dispatch) {\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    }).then(function (res) {\n      return dispatch(change_edit_mode(false));\n    });\n  };\n}\nexport function delete_post(post_id) {\n  var url = process.env.NEXT_PUBLIC_POST_URL + \"delete/\" + post_id.toString();\n  return function (dispatch) {\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function () {\n      return dispatch(change_edit_mode(false));\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/src/redux/BlogActions.js"],"names":["RECEIVE_POSTS","UPDATE_POST","ADD_NEW_POST","ADD_NEW_PARAGRAPH","REMOVE_PARAGRAPH","CHANGE_EDIT_MODE","change_edit_mode","boolean_value","type","edit_mode","add_new_post","new_post","update_title","title","update_tags","tags","update_public","public_boolean","update_content","content","receive_posts","res","hasOwnProperty","posts","current_page","total_pages","index","p","_id","receivedAt","Date","now","fetch_public_posts","skip","dispatch","url","process","env","NEXT_PUBLIC_POST_URL","toString","fetch","then","json","fetch_posts","slice","fetch_post_by_id","post_id","create_new_post","method","headers","body","JSON","stringify","post","save_local_changes","delete_post"],"mappings":"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","sourcesContent":["export const RECEIVE_POSTS = \"RECEIVE_POSTS\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const ADD_NEW_POST = \"ADD_NEW_POST\";\r\nexport const ADD_NEW_PARAGRAPH = \"ADD_NEW_PARAGRAPH\";\r\nexport const REMOVE_PARAGRAPH = \"REMOVE_PARAGRAPH\";\r\nexport const CHANGE_EDIT_MODE = \"CHANGE_EDIT_MODE\";\r\n\r\n// TERMINALS\r\nexport function change_edit_mode(boolean_value) {\r\n  return {\r\n    type: CHANGE_EDIT_MODE, \r\n    edit_mode: boolean_value\r\n  }\r\n}\r\nexport function add_new_post(new_post) {\r\n  return {\r\n    type: ADD_NEW_POST,\r\n    new_post: new_post\r\n  }\r\n}\r\nexport function update_title(new_post, title) {\r\n  new_post.title = title\r\n  return {\r\n    type: UPDATE_POST,\r\n    new_post: new_post\r\n  }\r\n}\r\nexport function update_tags(new_post, tags) {\r\n  new_post.tags = tags\r\n  return {\r\n    type: UPDATE_POST,\r\n    new_post: new_post\r\n  }\r\n}\r\nexport function update_public(new_post, public_boolean) {\r\n  new_post.public = public_boolean\r\n  return {\r\n    type: UPDATE_POST,\r\n    new_post: new_post\r\n  }\r\n}\r\nexport function update_content(new_post, content) {\r\n  new_post.content = content\r\n  return {\r\n    type: UPDATE_POST, \r\n    new_post: new_post\r\n  }\r\n}\r\nfunction receive_posts(res) {\r\n  // TEMPORARY\r\n  if(!res.hasOwnProperty('posts')) {\r\n    res = {\r\n      posts: res,\r\n      current_page: 1,\r\n      total_pages: 1\r\n    }\r\n  } \r\n  const posts = {}\r\n  for( var index in res.posts ) {\r\n    let p = res.posts[index]\r\n    posts[p._id] = p\r\n  }\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    posts: posts,\r\n    current_page: res.current_page,\r\n    total_pages: res.total_pages,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n// FETCHERS\r\nexport function fetch_public_posts(skip = 0) {\r\n  return dispatch => {\r\n    let url = process.env.NEXT_PUBLIC_POST_URL+\"public\"\r\n    if(skip > 0){\r\n      url += \"?skip=\"+skip.toString()\r\n    } \r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        dispatch(receive_posts(res))\r\n      })\r\n  }\r\n}\r\n\r\nexport function fetch_posts(skip = 0) {\r\n  return dispatch => {\r\n    let url = process.env.NEXT_PUBLIC_POST_URL\r\n    if(skip > 0){\r\n      url = url.slice(0, -1) + \"?skip=\"+skip.toString()\r\n    } \r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res => dispatch(receive_posts(res)))\r\n  }\r\n}\r\n\r\nexport function fetch_post_by_id(post_id) {\r\n  return dispatch => {\r\n    fetch(process.env.NEXT_PUBLIC_POST_URL+post_id)\r\n      .then(res => res.json())\r\n      .then(res => dispatch(receive_posts(res)))\r\n  }\r\n}\r\n\r\nexport function create_new_post() {\r\n  return dispatch => {\r\n    var url = process.env.NEXT_PUBLIC_POST_URL + \"add/\"\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({})\r\n    }).then(res => res.json())\r\n    .then(res => {\r\n      dispatch(add_new_post(res.post))\r\n      dispatch(change_edit_mode(true))\r\n    })\r\n  }\r\n}\r\nexport function save_local_changes(post) {\r\n  var url = process.env.NEXT_PUBLIC_POST_URL + \"update/\" + post._id.toString()\r\n  return dispatch => {\r\n    fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(post)\r\n    }).then(res => dispatch(change_edit_mode(false)))\r\n  }\r\n}\r\n\r\nexport function delete_post(post_id) {\r\n  var url = process.env.NEXT_PUBLIC_POST_URL + \"delete/\" +post_id.toString()\r\n  return dispatch => {\r\n    fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(res => res.json())\r\n    .then(() => dispatch(change_edit_mode(false)))\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}