{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aaron\\\\Desktop\\\\aaronbae.com\\\\frontend\\\\src\\\\pages\\\\projects\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Project from '../../components/Projects/Project';\nimport '../../styles/Projects/index.css';\nexport default function Projects() {\n  return __jsx(\"div\", {\n    id: \"projects-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"highlighted-projects\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }, __jsx(Project, {\n    title: \"aaronbae.com\",\n    tech_tags: \"NextJS, Express, MongoDB\",\n    github_url: \"https://github.com/aaronbae/aaronbae.com\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"aaronbae-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    src: \"/projects/aaronbae.png\",\n    className: \"project-img\",\n    alt: \"aaronbae.com project screenshot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 15\n    }\n  }, \"point 1\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 15\n    }\n  }, \"point 2\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }, \"point 3\"), __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  }, \"point 4\"))))), __jsx(\"div\", {\n    className: \"non-highlighted-projects\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(Project, {\n    title: \"Finance App\",\n    tech_tags: \"MongoDB, YahooAPI\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, \"Finance App is intended to be used as an analytical tool from the historical stock values. It automatically pulls daily Open-High-Low-Close (OHLC) values from Yahoo API, and shows the users the stocks of their choosing.\")), __jsx(Project, {\n    title: \"Human Dialogue\",\n    tech_tags: \"Python, HuggingFace\",\n    github_url: \"https://github.com/aaronbae/HumanDialogue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \"Humang Dialogue quantifies the information exchange within a conversation. We are using a BERT-based transformer models to identify question-answer pairs within a transcript, and quantify them based on custom metrics.\")), __jsx(Project, {\n    title: \"AnaQA\",\n    tech_tags: \"Python, Pytorch, HotpotQA\",\n    github_url: \"https://github.com/aaronbae/AnaQA\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"AnaQA is a project that merges together DecompRC and Dr.QA to create a different type of question answering system. Given a question in the form of an english sentence, it is able to answer them based on the data gathered from Wikipedia.\"))));\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/src/pages/projects/index.js"],"names":["Project","Projects"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,mCAApB;AACA,OAAO,iCAAP;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,SACE;AAAK,IAAA,EAAE,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,SAAS,EAAC,0BAFZ;AAGE,IAAA,UAAU,EAAC,0CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAC,wBAAT;AAAkC,IAAA,SAAS,EAAC,aAA5C;AAA0D,IAAA,GAAG,EAAC,iCAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CAFF,CALF,CADF,CADF,EAkBE;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAC,aADR;AAEE,IAAA,SAAS,EAAC,mBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mOAJF,CADF,EAWE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,gBAAf;AAAgC,IAAA,SAAS,EAAC,qBAA1C;AAAgE,IAAA,UAAU,EAAC,2CAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iOADF,CAXF,EAkBE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,OAAf;AAAuB,IAAA,SAAS,EAAC,2BAAjC;AAA6D,IAAA,UAAU,EAAC,mCAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qPADF,CAlBF,CAlBF,CADF;AA+CD","sourcesContent":["import Project from '../../components/Projects/Project'\r\nimport '../../styles/Projects/index.css'\r\n\r\nexport default function Projects() {\r\n  return (\r\n    <div id=\"projects-container\">\r\n      <div className=\"highlighted-projects\">\r\n        <Project \r\n          title=\"aaronbae.com\" \r\n          tech_tags=\"NextJS, Express, MongoDB\" \r\n          github_url=\"https://github.com/aaronbae/aaronbae.com\"\r\n        >\r\n          <div className=\"aaronbae-content\">\r\n            <img src=\"/projects/aaronbae.png\" className=\"project-img\" alt=\"aaronbae.com project screenshot\" />\r\n            <ul>\r\n              <li>point 1</li>\r\n              <li>point 2</li>\r\n              <li>point 3</li>\r\n              <li>point 4</li>\r\n            </ul>\r\n          </div>\r\n        </Project>\r\n      </div>\r\n      <div className=\"non-highlighted-projects\">\r\n        <Project \r\n          title=\"Finance App\" \r\n          tech_tags=\"MongoDB, YahooAPI\" \r\n        >\r\n          <p>\r\n            Finance App is intended to be used as an analytical tool from the historical stock\r\n            values. It automatically pulls daily Open-High-Low-Close (OHLC) values from Yahoo API, \r\n            and shows the users the stocks of their choosing.\r\n          </p>\r\n        </Project> \r\n        <Project title=\"Human Dialogue\" tech_tags=\"Python, HuggingFace\" github_url=\"https://github.com/aaronbae/HumanDialogue\">\r\n          <p>\r\n            Humang Dialogue quantifies the information exchange within a conversation.\r\n            We are using a BERT-based transformer models to identify question-answer pairs within a \r\n            transcript, and quantify them based on custom metrics. \r\n          </p>\r\n        </Project> \r\n        <Project title=\"AnaQA\" tech_tags=\"Python, Pytorch, HotpotQA\" github_url=\"https://github.com/aaronbae/AnaQA\">\r\n          <p>\r\n            AnaQA is a project that merges together DecompRC and Dr.QA to create a different type\r\n            of question answering system. Given a question in the form of an english sentence,\r\n            it is able to answer them based on the data gathered from Wikipedia. \r\n          </p>\r\n        </Project> \r\n      </div>\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}