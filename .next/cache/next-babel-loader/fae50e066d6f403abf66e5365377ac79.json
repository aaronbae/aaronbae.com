{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from 'react';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport BlogReducer, { initialState as BlogInit } from './BlogReducer';\nimport AdminReducer, { initialState as AdminInit } from './AdminReducer';\nlet store;\n\nfunction initStore(initialState) {\n  const providedAdmin = initialState ? initialState.AdminReducer : {};\n  const providedBlog = initialState ? initialState.BlogReducer : {};\n  const new_initial_state = {\n    AdminReducer: _objectSpread(_objectSpread({}, AdminInit), providedAdmin),\n    BlogReducer: _objectSpread(_objectSpread({}, BlogInit), providedBlog)\n  };\n  const rootReducer = combineReducers({\n    BlogReducer,\n    AdminReducer\n  });\n  return createStore(rootReducer, new_initial_state, applyMiddleware(thunkMiddleware));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/src/redux/Store.js"],"names":["useMemo","combineReducers","createStore","applyMiddleware","thunkMiddleware","BlogReducer","initialState","BlogInit","AdminReducer","AdminInit","store","initStore","providedAdmin","providedBlog","new_initial_state","rootReducer","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,WAAP,IAAsBC,YAAY,IAAIC,QAAtC,QAAqD,eAArD;AACA,OAAOC,YAAP,IAAuBF,YAAY,IAAIG,SAAvC,QAAuD,gBAAvD;AAEA,IAAIC,KAAJ;;AAEA,SAASC,SAAT,CAAmBL,YAAnB,EAAiC;AAC/B,QAAMM,aAAa,GAAGN,YAAY,GAAGA,YAAY,CAACE,YAAhB,GAA+B,EAAjE;AACA,QAAMK,YAAY,GAAGP,YAAY,GAAGA,YAAY,CAACD,WAAhB,GAA8B,EAA/D;AACA,QAAMS,iBAAiB,GAAG;AACxBN,IAAAA,YAAY,kCACPC,SADO,GAEPG,aAFO,CADY;AAKxBP,IAAAA,WAAW,kCACNE,QADM,GAENM,YAFM;AALa,GAA1B;AAUA,QAAME,WAAW,GAAGd,eAAe,CAAC;AAClCI,IAAAA,WADkC;AAElCG,IAAAA;AAFkC,GAAD,CAAnC;AAIA,SAAON,WAAW,CAACa,WAAD,EAAcD,iBAAd,EAAiCX,eAAe,CAACC,eAAD,CAAhD,CAAlB;AACD;;AAED,OAAO,MAAMY,eAAe,GAAIC,cAAD,IAAoB;AAAA;;AACjD,MAAIC,MAAM,cAAGR,KAAH,6CAAYC,SAAS,CAACM,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIP,KAAtB,EAA6B;AAC3BQ,IAAAA,MAAM,GAAGP,SAAS,iCACbD,KAAK,CAACS,QAAN,EADa,GAEbF,cAFa,EAAlB,CAD2B,CAK3B;;AACAP,IAAAA,KAAK,GAAGU,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC,OAAOF,MAAP,CAfc,CAgBjD;;AACA,MAAI,CAACR,KAAL,EAAYA,KAAK,GAAGQ,MAAR;AAEZ,SAAOA,MAAP;AACD,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBf,YAAlB,EAAgC;AACrC,QAAMI,KAAK,GAAGV,OAAO,CAAC,MAAMgB,eAAe,CAACV,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { useMemo } from 'react'\r\nimport { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport BlogReducer, { initialState as BlogInit} from './BlogReducer';\r\nimport AdminReducer, { initialState as AdminInit} from './AdminReducer';\r\n\r\nlet store\r\n\r\nfunction initStore(initialState) {\r\n  const providedAdmin = initialState ? initialState.AdminReducer : {}\r\n  const providedBlog = initialState ? initialState.BlogReducer : {}\r\n  const new_initial_state = {\r\n    AdminReducer: {\r\n      ...AdminInit,\r\n      ...providedAdmin\r\n    },\r\n    BlogReducer: {\r\n      ...BlogInit,\r\n      ...providedBlog\r\n    }\r\n  }  \r\n  const rootReducer = combineReducers({\r\n    BlogReducer,\r\n    AdminReducer\r\n  });\r\n  return createStore(rootReducer, new_initial_state, applyMiddleware(thunkMiddleware))\r\n}\r\n\r\nexport const initializeStore = (preloadedState) => {\r\n  let _store = store ?? initStore(preloadedState)\r\n\r\n  // After navigating to a page with an initial Redux state, merge that state\r\n  // with the current state in the store, and create a new store\r\n  if (preloadedState && store) {\r\n    _store = initStore({\r\n      ...store.getState(),\r\n      ...preloadedState,\r\n    })\r\n    // Reset the current store\r\n    store = undefined\r\n  }\r\n\r\n  // For SSG and SSR always create a new store\r\n  if (typeof window === 'undefined') return _store\r\n  // Create the store once in the client\r\n  if (!store) store = _store\r\n\r\n  return _store\r\n}\r\n\r\nexport function useStore(initialState) {\r\n  const store = useMemo(() => initializeStore(initialState), [initialState])\r\n  return store\r\n}"]},"metadata":{},"sourceType":"module"}