{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aaron\\\\Desktop\\\\aaronbae.com\\\\frontend\\\\components\\\\Blog\\\\PostViewer.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { Component } from 'react';\nimport { format_date } from '../Utils/HelperFunctions'; // Redux handlers\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetch_post_by_id } from '../Redux/BlogActions';\nimport { isMyImageURL, convertMyImageURL } from '../Utils/HelperFunctions';\nimport DocumentMeta from 'react-document-meta';\nimport { FacebookShareButton, FacebookIcon, LinkedinShareButton, LinkedinIcon, TwitterShareButton, TwitterIcon } from \"react-share\";\nimport './PostViewer.scss';\n\nclass PostViewer extends Component {\n  componentDidMount() {\n    const {\n      dispatch\n    } = this.props;\n    let post_id = this.props.match.params[\"id\"];\n    dispatch(fetch_post_by_id(post_id));\n    window.scrollTo(0, 0); // Need to scroll to top if coming from /blog\n  }\n\n  render() {\n    const {\n      posts\n    } = this.props;\n    let post_id = this.props.match.params[\"id\"];\n    let isPostFetched = posts.length > 0;\n    let meta = {}; // TOOD: Remember that we don't have spinner div developed yet\n\n    if (isPostFetched) {\n      var id2index = this.props.id2index;\n      var thisPost = posts[id2index[post_id]];\n      meta = {\n        title: thisPost.title,\n        description: 'A Post Written by Aaron',\n        canonical: \"https://www.aaronbae.com\" + this.props.location.pathname\n      };\n    }\n\n    return __jsx(\"div\", {\n      className: \"row post-viewer-container \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, isPostFetched && __jsx(DocumentMeta, _extends({}, meta, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: \"col-11 offset-md-2 col-md-8 offset-xl-3 col-xl-6 post-viewer-main-col card-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"row viewer-information-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: \"col-5 no-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, format_date(thisPost.createtime)), __jsx(\"div\", {\n      className: \"col-7 no-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    }, __jsx(\"span\", {\n      className: \"tags-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, \"Tags : \"), thisPost.tags.map((item, index) => __jsx(\"span\", {\n      key: index,\n      className: \"tag \" + item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }\n    }, item + \", \"))))), __jsx(\"div\", {\n      className: \"row viewer-title-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, thisPost.title), __jsx(\"div\", {\n      className: \"row viewer-media-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, __jsx(FacebookShareButton, {\n      url: \"https://www.aaronbae.com\" + this.props.location.pathname,\n      quote: thisPost.title + \" from aaronbae.com\",\n      className: \"media-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, __jsx(FacebookIcon, {\n      size: 20,\n      round: true,\n      bgStyle: {\n        fill: \"#696867\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 19\n      }\n    })), __jsx(LinkedinShareButton, {\n      url: \"https://www.aaronbae.com\" + this.props.location.pathname,\n      title: thisPost.title + \" from aaronbae.com\",\n      summary: thisPost.content.join(\" \").substring(0, 100),\n      source: \"aaronbae.com\",\n      className: \"media-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, __jsx(LinkedinIcon, {\n      size: 20,\n      round: true,\n      bgStyle: {\n        fill: \"#696867\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    })), __jsx(TwitterShareButton, {\n      url: \"https://www.aaronbae.com\" + this.props.location.pathname,\n      title: thisPost.title,\n      className: \"media-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, __jsx(TwitterIcon, {\n      size: 20,\n      round: true,\n      bgStyle: {\n        fill: \"#696867\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }\n    }))), __jsx(\"div\", {\n      className: \"row viewer-content-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, thisPost.content.map((i, key) => {\n      if (isMyImageURL(i)) {\n        return __jsx(\"img\", {\n          key: key,\n          className: \"aws-image\",\n          src: convertMyImageURL(i),\n          alt: \"Loaded from AWS\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 28\n          }\n        });\n      } else {\n        return __jsx(\"div\", {\n          className: \"content-paragraph\",\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 28\n          }\n        }, i);\n      }\n    })))));\n  }\n\n}\n\nPostViewer.propTypes = {\n  id2index: PropTypes.object.isRequired,\n  posts: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired\n};\n\nfunction mapStateToProps(state) {\n  const {\n    posts,\n    id2index\n  } = state.BlogReducer;\n  return {\n    id2index: id2index,\n    posts: posts\n  };\n}\n\nexport default connect(mapStateToProps)(PostViewer);","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/components/Blog/PostViewer.js"],"names":["React","Component","format_date","PropTypes","connect","fetch_post_by_id","isMyImageURL","convertMyImageURL","DocumentMeta","FacebookShareButton","FacebookIcon","LinkedinShareButton","LinkedinIcon","TwitterShareButton","TwitterIcon","PostViewer","componentDidMount","dispatch","props","post_id","match","params","window","scrollTo","render","posts","isPostFetched","length","meta","id2index","thisPost","title","description","canonical","location","pathname","createtime","tags","map","item","index","fill","content","join","substring","i","key","propTypes","object","isRequired","array","func","mapStateToProps","state","BlogReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { format_date } from '../Utils/HelperFunctions';\r\n\r\n// Redux handlers\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { fetch_post_by_id } from '../Redux/BlogActions'\r\n\r\nimport { \r\n  isMyImageURL,\r\n  convertMyImageURL\r\n} from '../Utils/HelperFunctions';\r\n\r\nimport DocumentMeta from 'react-document-meta';\r\nimport {\r\n  FacebookShareButton,\r\n  FacebookIcon,\r\n  LinkedinShareButton,\r\n  LinkedinIcon,\r\n  TwitterShareButton,\r\n  TwitterIcon,\r\n} from \"react-share\";\r\n\r\nimport './PostViewer.scss';\r\n\r\nclass PostViewer extends Component {  \r\n  componentDidMount() {\r\n    const { dispatch } = this.props\r\n    let post_id = this.props.match.params[\"id\"]\r\n    dispatch(fetch_post_by_id(post_id))\r\n    window.scrollTo(0, 0) // Need to scroll to top if coming from /blog\r\n  }\r\n\r\n  render() {\r\n    const { posts } = this.props\r\n    let post_id = this.props.match.params[\"id\"]\r\n    let isPostFetched = posts.length > 0\r\n    let meta = {}\r\n    // TOOD: Remember that we don't have spinner div developed yet\r\n    if( isPostFetched ) {\r\n      var id2index = this.props.id2index\r\n      var thisPost = posts[id2index[post_id]]\r\n      meta = {\r\n        title: thisPost.title,\r\n        description: 'A Post Written by Aaron',\r\n        canonical: \"https://www.aaronbae.com\" + this.props.location.pathname,\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"row post-viewer-container \">\r\n        {isPostFetched && \r\n          <DocumentMeta {...meta}>\r\n            <div className=\"col-11 offset-md-2 col-md-8 offset-xl-3 col-xl-6 post-viewer-main-col card-wrapper\"> \r\n              <div className=\"row viewer-information-row\">\r\n                <div className=\"col-5 no-padding\">\r\n                  {format_date(thisPost.createtime)}\r\n                </div>\r\n                <div className=\"col-7 no-padding\">\r\n                  <div className=\"float-right\">\r\n                    <span className=\"tags-label\">Tags : </span>\r\n                    {thisPost.tags.map((item, index) =>\r\n                      <span key={index} className={\"tag \" + item}>\r\n                        {item + \", \"}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"row viewer-title-row\">\r\n                {thisPost.title}\r\n              </div>\r\n              <div className=\"row viewer-media-row\">\r\n                <FacebookShareButton\r\n                url={\"https://www.aaronbae.com\" + this.props.location.pathname}\r\n                quote={thisPost.title + \" from aaronbae.com\"}\r\n                className=\"media-button\"\r\n                >\r\n                  <FacebookIcon size={20} round={true} bgStyle={{fill: \"#696867\"}}/>\r\n                </FacebookShareButton>\r\n                <LinkedinShareButton \r\n                  url={\"https://www.aaronbae.com\" + this.props.location.pathname}\r\n                  title={thisPost.title + \" from aaronbae.com\"} \r\n                  summary={thisPost.content.join(\" \").substring(0, 100)}\r\n                  source=\"aaronbae.com\"\r\n                  className=\"media-button\"\r\n                  >\r\n                  <LinkedinIcon size={20} round={true} bgStyle={{fill: \"#696867\"}}/>\r\n                </LinkedinShareButton>\r\n                <TwitterShareButton \r\n                  url={\"https://www.aaronbae.com\" + this.props.location.pathname}\r\n                  title={thisPost.title}\r\n                  className=\"media-button\"\r\n                  >\r\n                  <TwitterIcon size={20} round={true} bgStyle={{fill: \"#696867\"}}/>\r\n                </TwitterShareButton>\r\n              </div>\r\n              <div className=\"row viewer-content-row\">\r\n                {thisPost.content.map((i, key) => {\r\n                  if(isMyImageURL(i)){\r\n                    return <img key={key} className=\"aws-image\" src={convertMyImageURL(i)} alt=\"Loaded from AWS\" /> \r\n                  }\r\n                  else {\r\n                    return <div className=\"content-paragraph\" key={key}>{i}</div>\r\n                  }\r\n                })}\r\n              </div>\r\n            </div>\r\n          </DocumentMeta>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPostViewer.propTypes = {\r\n  id2index: PropTypes.object.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { posts, id2index } = state.BlogReducer\r\n  return {\r\n    id2index: id2index,\r\n    posts: posts\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PostViewer);\r\n"]},"metadata":{},"sourceType":"module"}