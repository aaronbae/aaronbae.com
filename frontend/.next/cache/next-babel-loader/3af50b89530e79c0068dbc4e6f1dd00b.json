{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function create_img_element(url) {\n  url = url.replace(/https:\\/\\/aaronbaebucket.s3.([^/]+)\\//gi, \"https://aaronbae.com/api/files/\");\n  return \"<img src='\".concat(url, \"' class='aws-image' alt='Loaded from AWS'>\");\n}\nexport function format_post_content(post) {\n  if (post.content === \"<br>\" || post.content === \"\") {\n    return \"<div></div>\";\n  }\n\n  return post.content;\n}\nexport function raw_tags_to_array(raw_tags_input) {\n  var punctuation = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\n  return raw_tags_input.split(\",\").map(function (s) {\n    return s.trim().replace(punctuation, '');\n  });\n}\nexport function posts_to_array(posts) {\n  var sorted_array = Object.values(posts).sort(function (a, b) {\n    if (a.createtime >= b.createtime) {\n      return -1;\n    }\n\n    return 1;\n  });\n  return sorted_array;\n}\nexport function page_to_skip(page, total_pages) {\n  return 5 * (Math.min(total_pages, Math.max(1, page)) - 1);\n}\nexport function pagination_array(current_page, total_pages) {\n  var start = Math.max(1, Math.min(current_page - 2, total_pages - 4));\n  return _toConsumableArray(Array(5).keys()).map(function (x) {\n    return x + start;\n  });\n}\nexport function query_param_string_to_objects(query_string) {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(query_string.toLowerCase().replace(\"?\", \"\").split(\"&\")),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var p = _step.value;\n      var p_split = p.toString().split(\"=\");\n      result[p_split[0]] = p_split[1];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\nexport function post_to_url(post) {\n  var modified_title = post.title.replace(/[^A-Za-z0-9\\s]/g, \"\").toLowerCase();\n  modified_title = modified_title.split(\" \").join(\"-\");\n  return \"/blog/\".concat(modified_title, \"-\").concat(post._id);\n}\nexport function url_to_post_id(url) {\n  var splitted = url.split(\"-\");\n  return splitted[splitted.length - 1];\n}\nexport function format_date(date_string) {\n  var given_date = new Date(date_string);\n  var corrected_d = new Date(given_date.getTime() - new Date().getTimezoneOffset() * 60000);\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var days = [\"Monday\", \"Tueday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  var result = days[corrected_d.getDay()] + \", \" + month[corrected_d.getMonth()] + \" \" + corrected_d.getDate() + \", \" + corrected_d.getFullYear();\n  return result;\n}\nexport function summarize_content(content) {\n  return content.replace(/<div>|<\\/div>|<br>|<img\\s+.*>/gi, \" \").substring(0, 200) + \"...\";\n}\nexport function find_image_from_post(post) {\n  var img = \"\";\n  var shit = post.content.match(/<img\\s.*alt=\"Loaded from AWS\">/gi);\n\n  if (shit) {\n    return shit[0].match(/https.*.(png|jpg|jpeg)/gi)[0];\n  }\n\n  return img;\n}","map":null,"metadata":{},"sourceType":"module"}