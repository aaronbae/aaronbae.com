{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function create_img_element(url) {\n  url = url.replace(/https:\\/\\/aaronbaebucket.s3.([^/]+)\\//gi, \"https://aaronbae.com/api/files/\");\n  return \"<img src='\".concat(url, \"' class='aws-image' alt='Loaded from AWS'>\");\n}\nexport function format_post_content(post) {\n  if (post.content === \"<br>\" || post.content === \"\") {\n    return \"<div></div>\";\n  }\n\n  return post.content;\n}\nexport function raw_tags_to_array(raw_tags_input) {\n  var punctuation = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\n  return raw_tags_input.split(\",\").map(function (s) {\n    return s.trim().replace(punctuation, '');\n  });\n}\nexport function posts_to_array(posts) {\n  var sorted_array = Object.values(posts).sort(function (a, b) {\n    if (a.createtime >= b.createtime) {\n      return -1;\n    }\n\n    return 1;\n  });\n  return sorted_array;\n}\nexport function page_to_skip(page, total_pages) {\n  return 5 * (Math.min(total_pages, Math.max(1, page)) - 1);\n}\nexport function pagination_array(current_page, total_pages) {\n  var start = Math.max(1, Math.min(current_page - 2, total_pages - 4));\n  return _toConsumableArray(Array(5).keys()).map(function (x) {\n    return x + start;\n  });\n}\nexport function query_param_string_to_objects(query_string) {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(query_string.toLowerCase().replace(\"?\", \"\").split(\"&\")),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var p = _step.value;\n      var p_split = p.toString().split(\"=\");\n      result[p_split[0]] = p_split[1];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\nexport function post_to_url(post) {\n  var modified_title = post.title.replace(/[^A-Za-z0-9\\s]/g, \"\").toLowerCase();\n  modified_title = modified_title.split(\" \").join(\"-\");\n  return \"/blog/\".concat(modified_title, \"-\").concat(post._id);\n}\nexport function url_to_post_id(url) {\n  var splitted = url.split(\"-\");\n  return splitted[splitted.length - 1];\n}\nexport function format_date(date_string) {\n  var given_date = new Date(date_string);\n  var corrected_d = new Date(given_date.getTime() - new Date().getTimezoneOffset() * 60000);\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  var days = [\"Monday\", \"Tueday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  var result = days[corrected_d.getDay()] + \", \" + month[corrected_d.getMonth()] + \" \" + corrected_d.getDate() + \", \" + corrected_d.getFullYear();\n  return result;\n}\nexport function summarize_content(content) {\n  return content.replace(/<div>|<\\/div>|<br>|<img\\s+.*>/gi, \" \").substring(0, 200) + \"...\";\n}\nexport function find_image_from_post(post) {\n  var img = \"\";\n  var shit = post.content.match(/<img\\s.*alt=\"Loaded from AWS\">/gi);\n\n  if (shit) {\n    return shit[0].match(/https.*.(png|jpg|jpeg)/gi)[0];\n  }\n\n  return img;\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/src/library/format.js"],"names":["create_img_element","url","replace","format_post_content","post","content","raw_tags_to_array","raw_tags_input","punctuation","split","map","s","trim","posts_to_array","posts","sorted_array","Object","values","sort","a","b","createtime","page_to_skip","page","total_pages","Math","min","max","pagination_array","current_page","start","Array","keys","x","query_param_string_to_objects","query_string","result","toLowerCase","p","p_split","toString","post_to_url","modified_title","title","join","_id","url_to_post_id","splitted","length","format_date","date_string","given_date","Date","corrected_d","getTime","getTimezoneOffset","month","days","getDay","getMonth","getDate","getFullYear","summarize_content","substring","find_image_from_post","img","shit","match"],"mappings":"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","sourcesContent":["export function create_img_element(url) {\r\n  url = url.replace(/https:\\/\\/aaronbaebucket.s3.([^/]+)\\//gi, \"https://aaronbae.com/api/files/\")\r\n  return `<img src='${url}' class='aws-image' alt='Loaded from AWS'>`\r\n}\r\nexport function format_post_content(post) {\r\n  if(post.content === \"<br>\" || post.content===\"\"){\r\n    return \"<div></div>\"\r\n  }\r\n  return post.content\r\n}\r\nexport function raw_tags_to_array(raw_tags_input) {\r\n  const punctuation = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g\r\n  return raw_tags_input.split(\",\").map(s => s.trim().replace(punctuation, ''))\r\n}\r\nexport function posts_to_array(posts) {\r\n  const sorted_array = Object.values(posts).sort(function(a,b) {\r\n    if(a.createtime >= b.createtime){\r\n      return -1\r\n    }\r\n    return 1\r\n  })\r\n  return sorted_array\r\n}\r\n\r\nexport function page_to_skip(page, total_pages) {\r\n  return 5 * (Math.min(total_pages, Math.max(1, page)) - 1)\r\n}\r\nexport function pagination_array(current_page, total_pages) {\r\n  const start = Math.max(1, Math.min(current_page - 2, total_pages-4))\r\n  return [...Array(5).keys()].map(x => x+start)\r\n}\r\n\r\n\r\nexport function query_param_string_to_objects(query_string){\r\n  let result = {}\r\n  for(const p of  query_string.toLowerCase().replace(\"?\", \"\").split(\"&\")){\r\n    let p_split = p.toString().split(\"=\")\r\n    result[p_split[0]] = p_split[1]\r\n  }\r\n  return result\r\n}\r\n\r\nexport function post_to_url(post) {\r\n  let modified_title = post.title.replace(/[^A-Za-z0-9\\s]/g,\"\").toLowerCase()\r\n  modified_title = modified_title.split(\" \").join(\"-\")\r\n  return `/blog/${modified_title}-${post._id}`\r\n}\r\nexport function url_to_post_id(url) {\r\n  let splitted = url.split(\"-\");\r\n  return splitted[splitted.length - 1]\r\n}\r\n\r\nexport function format_date(date_string) {\r\n  var given_date = new Date(date_string)\r\n  var corrected_d = new Date(given_date.getTime() - new Date().getTimezoneOffset() * 60000)\r\n  var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n  var days = [\"Monday\", \"Tueday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n  var result = days[corrected_d.getDay()] + \", \" + month[corrected_d.getMonth()] + \" \" + corrected_d.getDate() + \", \" + corrected_d.getFullYear()\r\n  return result\r\n}\r\n\r\nexport function summarize_content(content) {\r\n  return content.replace(/<div>|<\\/div>|<br>|<img\\s+.*>/gi, \" \").substring(0, 200) + \"...\"\r\n}\r\n\r\nexport function find_image_from_post(post){\r\n  let img = \"\"\r\n  const shit = post.content.match(/<img\\s.*alt=\"Loaded from AWS\">/gi)\r\n  if(shit){\r\n    return shit[0].match(/https.*.(png|jpg|jpeg)/gi)[0]\r\n  }\r\n  return img\r\n}\r\n"]},"metadata":{},"sourceType":"module"}