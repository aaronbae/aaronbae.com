{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aaron\\\\Desktop\\\\aaronbae.com\\\\frontend\\\\components\\\\Admin\\\\ContentEditor.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { isMyImageURL, convertMyImageURL } from '../Utils/HelperFunctions';\nimport { add_new_paragraph, update_post, remove_paragraph } from '../Redux/BlogActions';\nimport { upload_image } from '../Redux/AdminActions';\nimport './ContentEditor.scss';\n\nclass ContentEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.update_content = this.update_content.bind(this);\n    this.key_down = this.key_down.bind(this);\n    this.handle_focus = this.handle_focus.bind(this);\n    this.handle_blur = this.handle_blur.bind(this);\n    this.handle_add_image_button = this.handle_add_image_button.bind(this);\n    this.image_key_down = this.image_key_down.bind(this);\n    this.state = {\n      focus_index: -1,\n      image_div_show: false,\n      image_div_y: 0,\n      post_update_focus_paragraph_index: 0,\n      post_update_focus_character_index: 0\n    };\n  }\n\n  focus(paragraph, character) {\n    let needs_focus = document.getElementsByClassName(\"post-editor-paragraph\")[paragraph];\n    needs_focus.focus();\n\n    if (needs_focus.nodeName === \"TEXTAREA\") {\n      character = Math.min(character, needs_focus.innerHTML.length);\n      needs_focus.setSelectionRange(character, character);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      posts,\n      index,\n      edit_mode\n    } = this.props;\n    let prev_posts = prevProps.posts; // Resize title and content input\n\n    Array.from(document.getElementsByClassName(\"resize-required\")).forEach(e => {\n      e.style.height = \"0px\";\n      e.style.height = e.scrollHeight + 1 + \"px\";\n    }); // re-focus after paragraph creation or deletion\n\n    if (edit_mode && index !== -1 && prev_posts.length > 0 && posts[index].content.length !== prev_posts[index].content.length) {\n      this.focus(this.state.post_update_focus_paragraph_index, this.state.post_update_focus_character_index);\n    }\n  }\n\n  image_key_down(e) {\n    const {\n      posts,\n      dispatch,\n      index\n    } = this.props;\n    let num_paragraphs = parseInt(posts[index].content.length);\n    let paragraph_index = parseInt(e.target.getAttribute(\"index\"));\n\n    if (e.key === \"Enter\") {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      dispatch(add_new_paragraph(index, paragraph_index, \"\"));\n      this.setState({\n        post_update_focus_paragraph_index: paragraph_index + 1,\n        post_update_focus_character_index: 0\n      });\n    } else if (e.key === \"Backspace\" || e.key === \"Delete\") {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      dispatch(remove_paragraph(index, paragraph_index));\n      this.setState({\n        post_update_focus_paragraph_index: paragraph_index < num_paragraphs ? paragraph_index : Math.max(0, paragraph_index - 1),\n        post_update_focus_character_index: 0\n      });\n    } else if (e.key === \"ArrowUp\" && paragraph_index > 0) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index - 1, 0);\n    } else if (e.key === \"ArrowDown\" && paragraph_index < num_paragraphs - 1) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index + 1, 0);\n    }\n  }\n\n  key_down(e) {\n    const {\n      posts,\n      dispatch,\n      index\n    } = this.props;\n    let num_paragraphs = parseInt(posts[index].content.length);\n    let paragraph_index = parseInt(e.target.getAttribute(\"index\"));\n    let current_paragraph = e.target.value;\n    let cursor_index = parseInt(e.target.selectionStart);\n\n    if (e.key === \"Enter\") {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      let staying_content = [...posts[index].content];\n      staying_content[paragraph_index] = current_paragraph.substring(0, cursor_index);\n      let created_content = current_paragraph.substring(cursor_index);\n      dispatch(update_post(_objectSpread(_objectSpread({}, posts[index]), {}, {\n        content: staying_content\n      }), index));\n      dispatch(add_new_paragraph(index, paragraph_index, created_content));\n      this.setState({\n        post_update_focus_paragraph_index: paragraph_index + 1,\n        post_update_focus_character_index: 0\n      });\n    } else if (e.key === \"Backspace\" && cursor_index === 0 && paragraph_index > 0) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      let merged_content = [...posts[index].content];\n      merged_content[paragraph_index - 1] = merged_content[paragraph_index - 1] + current_paragraph;\n      dispatch(update_post(_objectSpread(_objectSpread({}, posts[index]), {}, {\n        content: merged_content\n      }), index));\n      dispatch(remove_paragraph(index, paragraph_index));\n      this.setState({\n        post_update_focus_paragraph_index: paragraph_index - 1,\n        post_update_focus_character_index: merged_content[paragraph_index - 1].length - current_paragraph.length\n      });\n    } else if (e.key === \"Delete\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      let merged_content = [...posts[index].content];\n      merged_content[paragraph_index] = current_paragraph + merged_content[paragraph_index + 1];\n      dispatch(update_post(_objectSpread(_objectSpread({}, posts[index]), {}, {\n        content: merged_content\n      }), index));\n      dispatch(remove_paragraph(index, paragraph_index + 1));\n      this.setState({\n        post_update_focus_paragraph_index: paragraph_index,\n        post_update_focus_character_index: current_paragraph.length\n      });\n    } else if (e.key === \"ArrowUp\" && cursor_index === 0 && paragraph_index > 0) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index - 1, cursor_index);\n    } else if (e.key === \"ArrowDown\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index + 1, cursor_index);\n    } else if (e.key === \"ArrowLeft\" && cursor_index === 0 && paragraph_index > 0) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index - 1, Number.MAX_VALUE);\n    } else if (e.key === \"ArrowRight\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1) {\n      e.stopPropagation();\n      e.preventDefault(); // this prevents update_content\n\n      this.focus(paragraph_index + 1, 0);\n    }\n  }\n\n  handle_blur(e) {\n    this.setState({\n      image_div_show: false\n    });\n  }\n\n  handle_focus(e) {\n    // check to show image tooltip\n    if (e.target.nodeName === \"TEXTAREA\") {\n      this.setState({\n        focus_index: e.target.getAttribute(\"index\"),\n        image_div_show: e.target.value.length === 0,\n        image_div_y: e.target.offsetTop\n      });\n    } else {\n      // Don't show when focus is set on image\n      this.setState({\n        image_div_show: false\n      });\n    }\n  }\n\n  handle_add_image_button(e) {\n    const {\n      posts,\n      index,\n      dispatch\n    } = this.props;\n    let f = e.target.files[0];\n\n    if (f.type.startsWith(\"image\")) {\n      dispatch(upload_image(f, posts[index], index, this.state.focus_index));\n    }\n  }\n\n  update_content(e) {\n    e.stopPropagation();\n    const {\n      dispatch,\n      posts,\n      index\n    } = this.props;\n    var new_content = [...posts[index].content];\n    new_content[e.target.getAttribute(\"index\")] = e.target.value;\n    this.setState({\n      image_div_show: e.target.value.length === 0\n    });\n    dispatch(update_post(_objectSpread(_objectSpread({}, posts[index]), {}, {\n      content: new_content\n    }), index));\n  }\n\n  render() {\n    const {\n      index,\n      posts\n    } = this.props;\n    let post = index !== -1 ? posts[index] : {\n      content: []\n    };\n    return __jsx(\"div\", {\n      className: \"row content-editor-container content-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"add-image-div\",\n      style: {\n        top: this.state.image_div_y + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, __jsx(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      className: \"file-selector\",\n      id: \"file-selector\",\n      onChange: this.handle_add_image_button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }), __jsx(\"label\", {\n      htmlFor: \"file-selector\",\n      className: this.state.image_div_show ? \"add-file-label show\" : \"add-file-label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      className: \"add-file-img\",\n      src: \"/assets/icons/plus-sign.png\",\n      alt: \"Add Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }))), post.content.map((i, key) => {\n      if (isMyImageURL(i)) {\n        return __jsx(\"div\", {\n          key: key,\n          index: key,\n          tabIndex: key,\n          className: \"post-editor-paragraph\",\n          onKeyDown: this.image_key_down,\n          onBlur: this.handle_blur,\n          onFocus: this.handle_focus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 20\n          }\n        }, __jsx(\"img\", {\n          className: \"aws-image \",\n          src: convertMyImageURL(i),\n          alt: \"Loaded from AWS\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 21\n          }\n        }));\n      } else {\n        // post-editor-paragrph : used to manage focusing\n        // content-paragraph    : used to match style with paragraphs in PostEditor\n        return __jsx(\"textarea\", {\n          key: key,\n          index: key,\n          tabIndex: key,\n          className: \"content-editor-text-area resize-required post-editor-paragraph content-paragraph\",\n          value: i,\n          onChange: this.update_content,\n          onKeyDown: this.key_down,\n          onFocus: this.handle_focus,\n          onBlur: this.handle_blur,\n          placeholder: key === 0 ? \"What's on your Mind?\" : \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 20\n          }\n        });\n      }\n    }));\n  }\n\n}\n\nContentEditor.propTypes = {\n  index: PropTypes.number.isRequired,\n  posts: PropTypes.array.isRequired,\n  edit_mode: PropTypes.bool.isRequired\n};\n\nfunction mapStateToProps(state) {\n  const {\n    selected_post,\n    edit_mode\n  } = state.AdminReducer;\n  const {\n    posts\n  } = state.BlogReducer;\n  return {\n    index: selected_post,\n    posts: posts,\n    edit_mode: edit_mode\n  };\n}\n\nexport default connect(mapStateToProps)(ContentEditor);","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/components/Admin/ContentEditor.js"],"names":["React","Component","PropTypes","connect","isMyImageURL","convertMyImageURL","add_new_paragraph","update_post","remove_paragraph","upload_image","ContentEditor","constructor","props","update_content","bind","key_down","handle_focus","handle_blur","handle_add_image_button","image_key_down","state","focus_index","image_div_show","image_div_y","post_update_focus_paragraph_index","post_update_focus_character_index","focus","paragraph","character","needs_focus","document","getElementsByClassName","nodeName","Math","min","innerHTML","length","setSelectionRange","componentDidUpdate","prevProps","posts","index","edit_mode","prev_posts","Array","from","forEach","e","style","height","scrollHeight","content","dispatch","num_paragraphs","parseInt","paragraph_index","target","getAttribute","key","stopPropagation","preventDefault","setState","max","current_paragraph","value","cursor_index","selectionStart","staying_content","substring","created_content","merged_content","Number","MAX_VALUE","offsetTop","f","files","type","startsWith","new_content","render","post","top","map","i","propTypes","number","isRequired","array","bool","mapStateToProps","selected_post","AdminReducer","BlogReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n  isMyImageURL,\r\n  convertMyImageURL\r\n} from '../Utils/HelperFunctions';\r\nimport {\r\n  add_new_paragraph,\r\n  update_post,\r\n  remove_paragraph\r\n} from '../Redux/BlogActions'\r\nimport {\r\n  upload_image\r\n} from '../Redux/AdminActions'\r\n\r\nimport './ContentEditor.scss';\r\n\r\n\r\nclass ContentEditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.update_content = this.update_content.bind(this);\r\n    this.key_down = this.key_down.bind(this);\r\n    this.handle_focus = this.handle_focus.bind(this);\r\n    this.handle_blur = this.handle_blur.bind(this);\r\n    this.handle_add_image_button = this.handle_add_image_button.bind(this);\r\n\r\n    this.image_key_down = this.image_key_down.bind(this);\r\n\r\n    this.state = {\r\n      focus_index: -1,\r\n      image_div_show: false,\r\n      image_div_y: 0,\r\n      post_update_focus_paragraph_index: 0,\r\n      post_update_focus_character_index: 0\r\n    }\r\n  }\r\n  focus(paragraph, character) {\r\n    let needs_focus = document.getElementsByClassName(\"post-editor-paragraph\")[paragraph] \r\n    needs_focus.focus()\r\n    if(needs_focus.nodeName===\"TEXTAREA\"){\r\n      character = Math.min(character, needs_focus.innerHTML.length)\r\n      needs_focus.setSelectionRange(character,character)\r\n    } \r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { posts, index, edit_mode } = this.props\r\n    let prev_posts = prevProps.posts\r\n\r\n    // Resize title and content input\r\n    Array.from(document.getElementsByClassName(\"resize-required\")).forEach((e)=>{\r\n      e.style.height = \"0px\"\r\n      e.style.height = (e.scrollHeight+1) + \"px\"\r\n    })\r\n    // re-focus after paragraph creation or deletion\r\n    if ( edit_mode && index !== -1 && prev_posts.length > 0 \r\n      && posts[index].content.length !== prev_posts[index].content.length) {\r\n      this.focus(this.state.post_update_focus_paragraph_index, this.state.post_update_focus_character_index)\r\n    }\r\n  }\r\n  image_key_down(e) {\r\n    const { posts, dispatch, index } = this.props\r\n    let num_paragraphs = parseInt(posts[index].content.length)\r\n    let paragraph_index = parseInt(e.target.getAttribute(\"index\"))\r\n    if(e.key === \"Enter\"){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      dispatch(add_new_paragraph(index, paragraph_index, \"\"))  \r\n      this.setState({\r\n        post_update_focus_paragraph_index: paragraph_index + 1,\r\n        post_update_focus_character_index: 0\r\n      })    \r\n    } \r\n    else if(e.key === \"Backspace\" || e.key === \"Delete\"){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      dispatch(remove_paragraph(index, paragraph_index)) \r\n      this.setState({\r\n        post_update_focus_paragraph_index: paragraph_index < num_paragraphs ? paragraph_index : Math.max(0, paragraph_index - 1),\r\n        post_update_focus_character_index: 0\r\n      })    \r\n    } \r\n    else if (e.key === \"ArrowUp\" && paragraph_index > 0){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index - 1, 0)\r\n    } \r\n    else if (e.key === \"ArrowDown\" && paragraph_index < num_paragraphs - 1){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index + 1, 0)\r\n    } \r\n  }\r\n\r\n  key_down(e) {\r\n    const { posts, dispatch, index } = this.props\r\n    let num_paragraphs = parseInt(posts[index].content.length)\r\n    let paragraph_index = parseInt(e.target.getAttribute(\"index\"))\r\n    let current_paragraph = e.target.value\r\n    let cursor_index = parseInt(e.target.selectionStart)\r\n\r\n    if(e.key === \"Enter\"){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      let staying_content = [...posts[index].content]\r\n      staying_content[paragraph_index] = current_paragraph.substring(0, cursor_index)\r\n      let created_content = current_paragraph.substring(cursor_index)\r\n      dispatch(update_post({...posts[index], content: staying_content}, index)) \r\n      dispatch(add_new_paragraph(index, paragraph_index, created_content))  \r\n      this.setState({\r\n        post_update_focus_paragraph_index: paragraph_index + 1,\r\n        post_update_focus_character_index: 0\r\n      })    \r\n    } \r\n    else if(e.key === \"Backspace\" && cursor_index === 0 && paragraph_index > 0){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      let merged_content = [...posts[index].content]\r\n      merged_content[paragraph_index - 1] = merged_content[paragraph_index - 1] + current_paragraph\r\n      dispatch(update_post({...posts[index], content: merged_content}, index)) \r\n      dispatch(remove_paragraph(index, paragraph_index)) \r\n      this.setState({\r\n        post_update_focus_paragraph_index: paragraph_index - 1,\r\n        post_update_focus_character_index: merged_content[paragraph_index - 1].length - current_paragraph.length\r\n      })    \r\n    } \r\n    else if (e.key === \"Delete\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      let merged_content = [...posts[index].content]\r\n      merged_content[paragraph_index] = current_paragraph + merged_content[paragraph_index + 1] \r\n      dispatch(update_post({...posts[index], content: merged_content}, index)) \r\n      dispatch(remove_paragraph(index, paragraph_index + 1))\r\n      this.setState({\r\n        post_update_focus_paragraph_index: paragraph_index,\r\n        post_update_focus_character_index: current_paragraph.length\r\n      })    \r\n    } \r\n    else if (e.key === \"ArrowUp\" && cursor_index === 0 && paragraph_index > 0){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index - 1, cursor_index)\r\n    } \r\n    else if (e.key === \"ArrowDown\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index + 1, cursor_index)\r\n    } \r\n    else if (e.key === \"ArrowLeft\" && cursor_index === 0 && paragraph_index > 0){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index - 1, Number.MAX_VALUE)\r\n    } \r\n    else if (e.key === \"ArrowRight\" && cursor_index === current_paragraph.length && paragraph_index < num_paragraphs - 1){\r\n      e.stopPropagation();\r\n      e.preventDefault() // this prevents update_content\r\n      this.focus(paragraph_index + 1, 0)\r\n    } \r\n  }\r\n  handle_blur(e) {\r\n    this.setState({\r\n      image_div_show: false,\r\n    })\r\n  }\r\n  handle_focus(e) {\r\n    // check to show image tooltip\r\n    if(e.target.nodeName===\"TEXTAREA\"){\r\n      this.setState({\r\n        focus_index: e.target.getAttribute(\"index\"),\r\n        image_div_show: e.target.value.length === 0,\r\n        image_div_y: e.target.offsetTop\r\n      })\r\n    } else {\r\n      // Don't show when focus is set on image\r\n      this.setState({ image_div_show: false })\r\n    }\r\n  }\r\n  handle_add_image_button(e) {\r\n    const { posts, index, dispatch } = this.props\r\n    let f = e.target.files[0]\r\n    if(f.type.startsWith(\"image\")){\r\n      dispatch(upload_image(f, posts[index], index, this.state.focus_index))\r\n    }\r\n  }\r\n\r\n  update_content(e) {\r\n    e.stopPropagation();\r\n    const { dispatch, posts, index } = this.props\r\n    var new_content = [...posts[index].content]\r\n    new_content[e.target.getAttribute(\"index\")] = e.target.value\r\n    this.setState({\r\n      image_div_show: e.target.value.length === 0\r\n    })\r\n    dispatch(update_post({...posts[index], content: new_content}, index)) \r\n  }\r\n\r\n  render() {\r\n    const { index, posts } = this.props\r\n    let post = index !== -1? posts[index]: {content: []}\r\n    return (\r\n      <div className=\"row content-editor-container content-row\">\r\n        <div className=\"add-image-div\" style={{top: this.state.image_div_y + \"px\" }}>\r\n          <input type=\"file\" name=\"file\" className=\"file-selector\" id=\"file-selector\" onChange={this.handle_add_image_button}/>\r\n          <label htmlFor=\"file-selector\" className={this.state.image_div_show ? \"add-file-label show\":\"add-file-label\"}>\r\n            <img className=\"add-file-img\" src=\"/assets/icons/plus-sign.png\" alt=\"Add Button\" />\r\n          </label>\r\n        </div>\r\n        {post.content.map((i, key) => {\r\n          if(isMyImageURL(i)){\r\n            return <div key={key} index={key} tabIndex={key} className=\"post-editor-paragraph\" \r\n                    onKeyDown={this.image_key_down} \r\n                    onBlur={this.handle_blur}\r\n                    onFocus={this.handle_focus}> \r\n                    <img className=\"aws-image \" src={convertMyImageURL(i)} alt=\"Loaded from AWS\" /> \r\n                  </div>\r\n          }\r\n          else {\r\n            // post-editor-paragrph : used to manage focusing\r\n            // content-paragraph    : used to match style with paragraphs in PostEditor\r\n            return <textarea key={key} index={key} tabIndex={key} className=\"content-editor-text-area resize-required post-editor-paragraph content-paragraph\" \r\n                    value={i} \r\n                    onChange={this.update_content} \r\n                    onKeyDown={this.key_down}\r\n                    onFocus={this.handle_focus}\r\n                    onBlur={this.handle_blur}\r\n                    placeholder={key===0?\"What's on your Mind?\":\"\"}/>\r\n          }\r\n          \r\n        })}\r\n      </div> \r\n    )\r\n  }\r\n}\r\n\r\nContentEditor.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  edit_mode: PropTypes.bool.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { selected_post, edit_mode } = state.AdminReducer\r\n  const { posts } = state.BlogReducer\r\n  return { \r\n    index: selected_post,\r\n    posts: posts,\r\n    edit_mode: edit_mode\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ContentEditor);\r\n"]},"metadata":{},"sourceType":"module"}