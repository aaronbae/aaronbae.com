{"ast":null,"code":"import { config } from '../Constants';\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const CLEAR_POSTS = \"CLEAR_POSTS\";\nexport const ADD_NEW_POST = \"ADD_NEW_POST\";\nexport const ADD_NEW_PARAGRAPH = \"ADD_NEW_PARAGRAPH\";\nexport const REMOVE_PARAGRAPH = \"REMOVE_PARAGRAPH\"; // TERMINALS\n\nexport function remove_paragraph(post_index, paragraph_index) {\n  return {\n    type: REMOVE_PARAGRAPH,\n    post_index: post_index,\n    paragraph_index: paragraph_index\n  };\n}\nexport function add_new_paragraph(post_index, paragraph_index, initial_content) {\n  return {\n    type: ADD_NEW_PARAGRAPH,\n    post_index: post_index,\n    paragraph_index: paragraph_index,\n    initial_content: initial_content\n  };\n}\nexport function add_new_post(new_post) {\n  return {\n    type: ADD_NEW_POST,\n    new_post: new_post\n  };\n}\nexport function update_post(new_post, index) {\n  return {\n    type: UPDATE_POST,\n    new_post: new_post,\n    index: index\n  };\n}\nexport function clear_posts() {\n  return {\n    type: CLEAR_POSTS,\n    posts: [],\n    id2index: {}\n  };\n}\n\nfunction receive_posts(res) {\n  var id2index = {};\n\n  if (!Array.isArray(res)) {\n    res = [res];\n  }\n\n  for (var index in res) {\n    id2index[res[index]._id] = index;\n  }\n\n  return {\n    type: RECEIVE_POSTS,\n    posts: res,\n    id2index: id2index,\n    receivedAt: Date.now()\n  };\n} // PROCESSORS\n\n\nexport function fetch_public_posts() {\n  return dispatch => {\n    fetch(config.url.POST_URL + \"public\").then(res => res.json()).then(res => dispatch(receive_posts(res)));\n  };\n}\nexport function fetch_posts() {\n  return dispatch => {\n    fetch(config.url.POST_URL).then(res => res.json()).then(res => dispatch(receive_posts(res)));\n  };\n}\nexport function fetch_post_by_id(post_id) {\n  return dispatch => {\n    fetch(config.url.POST_URL + post_id).then(res => res.json()).then(res => dispatch(receive_posts(res)));\n  };\n}","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/components/Redux/BlogActions.js"],"names":["config","RECEIVE_POSTS","UPDATE_POST","CLEAR_POSTS","ADD_NEW_POST","ADD_NEW_PARAGRAPH","REMOVE_PARAGRAPH","remove_paragraph","post_index","paragraph_index","type","add_new_paragraph","initial_content","add_new_post","new_post","update_post","index","clear_posts","posts","id2index","receive_posts","res","Array","isArray","_id","receivedAt","Date","now","fetch_public_posts","dispatch","fetch","url","POST_URL","then","json","fetch_posts","fetch_post_by_id","post_id"],"mappings":"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","sourcesContent":["import { config } from '../Constants'\r\n\r\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\r\nexport const UPDATE_POST = \"UPDATE_POST\";\r\nexport const CLEAR_POSTS = \"CLEAR_POSTS\";\r\nexport const ADD_NEW_POST = \"ADD_NEW_POST\";\r\nexport const ADD_NEW_PARAGRAPH = \"ADD_NEW_PARAGRAPH\";\r\nexport const REMOVE_PARAGRAPH = \"REMOVE_PARAGRAPH\";\r\n\r\n\r\n// TERMINALS\r\nexport function remove_paragraph(post_index, paragraph_index) {\r\n  return {\r\n    type: REMOVE_PARAGRAPH,\r\n    post_index: post_index,\r\n    paragraph_index: paragraph_index\r\n  }\r\n}\r\nexport function add_new_paragraph(post_index, paragraph_index, initial_content) {\r\n  return {\r\n    type: ADD_NEW_PARAGRAPH,\r\n    post_index: post_index,\r\n    paragraph_index: paragraph_index,\r\n    initial_content: initial_content\r\n  }\r\n}\r\nexport function add_new_post(new_post) {\r\n  return {\r\n    type: ADD_NEW_POST,\r\n    new_post: new_post\r\n  }\r\n}\r\nexport function update_post(new_post, index) {\r\n  return {\r\n    type: UPDATE_POST, \r\n    new_post: new_post, \r\n    index: index\r\n  }\r\n}\r\nexport function clear_posts() {\r\n  return {\r\n    type: CLEAR_POSTS,\r\n    posts: [],\r\n    id2index: {}\r\n  }\r\n}\r\nfunction receive_posts(res) {\r\n  var id2index = {}   \r\n  if(!Array.isArray(res)){\r\n    res = [res]\r\n  }\r\n  for( var index in res ) {\r\n    id2index[res[index]._id] = index\r\n  }\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    posts: res,\r\n    id2index: id2index,\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\n\r\n// PROCESSORS\r\nexport function fetch_public_posts() {\r\n  return dispatch => {\r\n    fetch(config.url.POST_URL+\"public\")\r\n      .then(res => res.json())\r\n      .then(res => dispatch(receive_posts(res)))\r\n  }\r\n}\r\n\r\nexport function fetch_posts() {\r\n  return dispatch => {\r\n    fetch(config.url.POST_URL)\r\n      .then(res => res.json())\r\n      .then(res => dispatch(receive_posts(res)))\r\n  }\r\n}\r\n\r\nexport function fetch_post_by_id(post_id) {\r\n  return dispatch => {\r\n    fetch(config.url.POST_URL+post_id)\r\n      .then(res => res.json())\r\n      .then(res => dispatch(receive_posts(res)))\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}