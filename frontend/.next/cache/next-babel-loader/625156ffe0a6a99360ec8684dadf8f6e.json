{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aaron\\\\Desktop\\\\aaronbae.com\\\\frontend\\\\components\\\\Admin\\\\AdminPost.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { format_date } from '../Utils/HelperFunctions';\nimport { withRouter } from 'react-router-dom';\nimport { isMyImageURL } from '../Utils/HelperFunctions'; // Redux handlers\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { viewpost } from '../Redux/AdminActions';\nimport styles from './AdminPost.module.scss';\n\nclass AdminPost extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post_id: props.post_id\n    };\n    this.handlePostClick = this.handlePostClick.bind(this);\n  }\n\n  handlePostClick(e) {\n    e.stopPropagation();\n    const {\n      dispatch,\n      edit_mode\n    } = this.props;\n\n    if (edit_mode) {// TODO: remind user that a post is selected already\n    } else {\n      dispatch(viewpost(this.state.post_id));\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    const {\n      title,\n      date,\n      summarized_content,\n      public_flag\n    } = this.props;\n    const formatted_date = format_date(date);\n    return __jsx(\"div\", {\n      className: public_flag ? \"row admin-post-container public\" : \"row admin-post-container\",\n      onClick: this.handlePostClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"individual-post\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"offset-1 col-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"row date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, formatted_date), __jsx(\"div\", {\n      className: \"row title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      className: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 40\n      }\n    }, title)), __jsx(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, summarized_content))));\n  }\n\n}\n\nAdminPost.propTypes = {\n  edit_mode: PropTypes.bool.isRequired,\n  selected_post: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  summarized_content: PropTypes.string.isRequired,\n  public_flag: PropTypes.bool.isRequired\n};\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    edit_mode,\n    selected_post\n  } = state.AdminReducer;\n  const {\n    posts\n  } = state.BlogReducer;\n  let this_post = posts[ownProps.post_id];\n  let summary = this_post.content.filter(x => !isMyImageURL(x)).join(\" \").substring(0, 100) + \"...\";\n  return {\n    edit_mode: edit_mode,\n    selected_post: selected_post,\n    title: this_post.title.substring(0, 61) + (this_post.title.length > 61 ? \"...\" : \"\"),\n    date: this_post.createtime,\n    summarized_content: summary,\n    public_flag: this_post.public\n  };\n}\n\nexport default withRouter(connect(mapStateToProps)(AdminPost));","map":{"version":3,"sources":["C:/Users/Aaron/Desktop/aaronbae.com/frontend/components/Admin/AdminPost.js"],"names":["React","Component","format_date","withRouter","isMyImageURL","PropTypes","connect","viewpost","styles","AdminPost","constructor","props","state","post_id","handlePostClick","bind","e","stopPropagation","dispatch","edit_mode","window","scrollTo","render","title","date","summarized_content","public_flag","formatted_date","propTypes","bool","isRequired","selected_post","number","string","mapStateToProps","ownProps","AdminReducer","posts","BlogReducer","this_post","summary","content","filter","x","join","substring","length","createtime","public"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,SACEC,YADF,QAEO,0BAFP,C,CAIA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,MAAMC,SAAN,SAAwBR,SAAxB,CAAkC;AAChCS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AADJ,KAAb;AAGA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDD,EAAAA,eAAe,CAACE,CAAD,EAAI;AACjBA,IAAAA,CAAC,CAACC,eAAF;AACA,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0B,KAAKR,KAArC;;AACA,QAAGQ,SAAH,EAAa,CACX;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,CAACX,QAAQ,CAAC,KAAKK,KAAL,CAAWC,OAAZ,CAAT,CAAR;AACAO,MAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmB,CAAnB;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA,kBAAf;AAAmCC,MAAAA;AAAnC,QAAmD,KAAKf,KAA9D;AACA,UAAMgB,cAAc,GAAGzB,WAAW,CAACsB,IAAD,CAAlC;AACA,WACE;AAAK,MAAA,SAAS,EAAEE,WAAW,GAAG,iCAAH,GAAuC,0BAAlE;AAA8F,MAAA,OAAO,EAAE,KAAKZ,eAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2Ba,cAA3B,CADF,EAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B;AAAG,MAAA,SAAS,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBJ,KAAnB,CAA3B,CAFF,EAGE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBE,kBAAtB,CAHF,CADF,CADF,CADF;AAWD;;AAlC+B;;AAqClChB,SAAS,CAACmB,SAAV,GAAsB;AACpBT,EAAAA,SAAS,EAAEd,SAAS,CAACwB,IAAV,CAAeC,UADN;AAEpBC,EAAAA,aAAa,EAAE1B,SAAS,CAAC2B,MAAV,CAAiBF,UAFZ;AAGpBP,EAAAA,KAAK,EAAElB,SAAS,CAAC4B,MAAV,CAAiBH,UAHJ;AAIpBN,EAAAA,IAAI,EAAEnB,SAAS,CAAC4B,MAAV,CAAiBH,UAJH;AAKpBL,EAAAA,kBAAkB,EAAEpB,SAAS,CAAC4B,MAAV,CAAiBH,UALjB;AAMpBJ,EAAAA,WAAW,EAAErB,SAAS,CAACwB,IAAV,CAAeC;AANR,CAAtB;;AASA,SAASI,eAAT,CAAyBtB,KAAzB,EAAgCuB,QAAhC,EAA0C;AACxC,QAAM;AAAEhB,IAAAA,SAAF;AAAaY,IAAAA;AAAb,MAA+BnB,KAAK,CAACwB,YAA3C;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYzB,KAAK,CAAC0B,WAAxB;AACA,MAAIC,SAAS,GAAGF,KAAK,CAACF,QAAQ,CAACtB,OAAV,CAArB;AACA,MAAI2B,OAAO,GAAGD,SAAS,CAACE,OAAV,CAAkBC,MAAlB,CAAyBC,CAAC,IAAI,CAACvC,YAAY,CAACuC,CAAD,CAA3C,EAAgDC,IAAhD,CAAqD,GAArD,EAA0DC,SAA1D,CAAoE,CAApE,EAAuE,GAAvE,IAA8E,KAA5F;AACA,SAAO;AACL1B,IAAAA,SAAS,EAAEA,SADN;AAELY,IAAAA,aAAa,EAAEA,aAFV;AAGLR,IAAAA,KAAK,EAAEgB,SAAS,CAAChB,KAAV,CAAgBsB,SAAhB,CAA0B,CAA1B,EAA4B,EAA5B,KAAmCN,SAAS,CAAChB,KAAV,CAAgBuB,MAAhB,GAAyB,EAAzB,GAA8B,KAA9B,GAAsC,EAAzE,CAHF;AAILtB,IAAAA,IAAI,EAAEe,SAAS,CAACQ,UAJX;AAKLtB,IAAAA,kBAAkB,EAAEe,OALf;AAMLd,IAAAA,WAAW,EAAEa,SAAS,CAACS;AANlB,GAAP;AAQD;;AAED,eAAgB7C,UAAU,CAACG,OAAO,CAAC4B,eAAD,CAAP,CAAyBzB,SAAzB,CAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\r\nimport { format_date } from '../Utils/HelperFunctions';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { \r\n  isMyImageURL\r\n} from '../Utils/HelperFunctions';\r\n\r\n// Redux handlers\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { viewpost } from '../Redux/AdminActions'\r\n\r\nimport styles from './AdminPost.module.scss';\r\n\r\nclass AdminPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      post_id: props.post_id\r\n    }\r\n    this.handlePostClick = this.handlePostClick.bind(this);\r\n  }\r\n\r\n  handlePostClick(e) {\r\n    e.stopPropagation();\r\n    const { dispatch, edit_mode } = this.props\r\n    if(edit_mode){\r\n      // TODO: remind user that a post is selected already\r\n    } else {\r\n      dispatch(viewpost(this.state.post_id))  \r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { title, date, summarized_content, public_flag } = this.props\r\n    const formatted_date = format_date(date)\r\n    return (\r\n      <div className={public_flag ? \"row admin-post-container public\" : \"row admin-post-container\"} onClick={this.handlePostClick}>\r\n        <div className=\"individual-post\">\r\n          <div className=\"offset-1 col-10\">\r\n            <div className=\"row date\">{formatted_date}</div>\r\n            <div className=\"row title\"><p className=\"h5\">{title}</p></div>\r\n            <div className=\"row\">{summarized_content}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAdminPost.propTypes = {\r\n  edit_mode: PropTypes.bool.isRequired,\r\n  selected_post: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  summarized_content: PropTypes.string.isRequired,\r\n  public_flag: PropTypes.bool.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const { edit_mode, selected_post } = state.AdminReducer\r\n  const { posts } = state.BlogReducer\r\n  let this_post = posts[ownProps.post_id]\r\n  let summary = this_post.content.filter(x => !isMyImageURL(x)).join(\" \").substring(0, 100) + \"...\"\r\n  return {\r\n    edit_mode: edit_mode,\r\n    selected_post: selected_post,\r\n    title: this_post.title.substring(0,61) + (this_post.title.length > 61 ? \"...\" : \"\" ),\r\n    date: this_post.createtime,\r\n    summarized_content: summary,\r\n    public_flag: this_post.public\r\n  }\r\n}\r\n\r\nexport default  withRouter(connect(mapStateToProps)(AdminPost));"]},"metadata":{},"sourceType":"module"}